Leetcode Problems with solution
⦁	1.LeetCode(String):Jewels and String
⦁	import java.util.Scanner;
⦁	public class second {
⦁	public static int jeewels(String jewels,String Stones ){
⦁	int count = 0;
⦁	for(int i=0;i<Stones.length();i++){
⦁	char stone = Stones.charAt(i);
⦁	if(jewels.contains(String.valueOf(stone))){
⦁	count++;
⦁	}
⦁	}return count;
⦁	}
⦁	public static void main(String args[]){
⦁	Scanner sc = new Scanner(System.in);
⦁	System.out.println("ENter jewels = ");
⦁	String jewels = sc.nextLine();
⦁	System.out.println("Enter the stones: ");
⦁	String stones = sc.nextLine();
⦁	int res = jeewels(jewels,stones);
⦁	System.out.println(res);
⦁	}
⦁	}
⦁	Output:
⦁	"aaAB"
⦁	"ABBBcd"
⦁	4
⦁	Note:
⦁	if(jewels.contains(String.valueOf(stone))){
⦁	we can also write it as a
⦁	if(jewels.indexOf(stone)!=-1)
⦁	
⦁	
⦁	2.LeetCode(string):Converting UpperCase to LowerCase
⦁	import java.util.Scanner;
⦁	class Solution {
⦁	public String toLowerCase(String s) {
⦁	String str = s.toLowerCase();
⦁	return str;
⦁	}
⦁	public static void main(String args[]){
⦁	Scanner sc = new Scanner(System.in);
⦁	String s = sc.nextLine();
⦁	Solution obj = new Solution();
⦁	String res = obj.toLowerCase(s);
⦁	System.out.print(res);
⦁	}
⦁	}
⦁	Output:
⦁	Input:"Hello"
⦁	output:"hello
⦁	
⦁	
⦁	3.LeetCode(String): Length of the last word.
⦁	import java.util.Scanner;
⦁	class Demo{
⦁	public int lengthof(String s){
⦁	s = s.trim();
⦁	int last = s.lastIndexOf(' ');
⦁	return s.length()-last-1;
⦁	}
⦁	public static void main(String args[]){
⦁	Scanner sc = new Scanner(System.in);
⦁	String s = sc.nextLine();
⦁	Demo d = new Demo();
⦁	System.out.print(d.lengthof(s));
⦁	}
⦁	}
⦁	Output: " Hello World "
⦁	5
⦁	" fly me to the moon "
⦁	4
⦁	
⦁	
⦁	4.Leetcode(1):pairSum for given target
⦁	import java.util.*;
⦁	class Solution {
⦁	public int[] twoSum(int[] nums, int target) {
⦁	int[] store = new int[2];
⦁	for(int i=0;i<nums.length;i++){
⦁	for(int j=i+1;j<nums.length;j++){
⦁	if(nums[i]+nums[j]==target){
⦁	store[0] = i;
⦁	store[1] = j;
⦁	return store;
⦁	}
⦁	}
⦁	}return store;
⦁	}
⦁	public static void main(String args[]){
⦁	Scanner sc = new Scanner(System.in);
⦁	int n = sc.nextInt();
⦁	int a[] = new int[n];
⦁	for(int i=0;i<n;i++){
⦁	a[i] = sc.nextInt();
⦁	}
⦁	int target = sc.nextInt();
⦁	Solution s = new Solution();
⦁	System.out.print(Arrays.toString(s.twoSum(a,target)));
⦁	}
⦁	}
⦁	Output:
⦁	Example 1:
⦁	Input: nums = [2,7,11,15], target = 9
⦁	Output: [0,1]
⦁	Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].
⦁	Example 2:
⦁	Input: nums = [3,2,4], target = 6
⦁	Output: [1,2]
⦁	Example 3:
⦁	Input: nums = [3,3], target = 6
⦁	Output: [0,1]
⦁	
⦁	
⦁	5.Leetcode(String): FizzBuzz
⦁	import java.util.*;
⦁	class Solution {
⦁	public List<String> fizzBuzz(int n) {
⦁	List<String> ans = new ArrayList<>();
⦁	for(int i=1;i<=n;i++){
⦁	if(i%3==0 && i%5==0){
⦁	ans.add("FizzBuzz");
⦁	}
⦁	else if(i%3==0){
⦁	ans.add("Fizz");
⦁	}
⦁	else if(i%5==0){
⦁	ans.add("Buzz");
⦁	}
⦁	else{
⦁	ans.add(String.valueOf(i));
⦁	}
⦁	}   return ans;
⦁	}
⦁	public static void main(String args[]){
⦁	Scanner sc = new Scanner(System.in);
⦁	int n = sc.nextInt();
⦁	Solution ans = new Solution();
⦁	System.out.print(ans.fizzBuzz(n));
⦁	}
⦁	}
⦁	Output:
⦁	Example 1:
⦁	Input: n = 3
⦁	Output: ["1","2","Fizz"]
⦁	Example 2:
⦁	Input: n = 5
⦁	Output: ["1","2","Fizz","4","Buzz"]
⦁	Example 3:
⦁	Input: n = 15
⦁	Output: ["1","2","Fizz","4","Buzz","Fizz","7","8","Fizz","Buzz","11","Fizz","13","14","FizzBuzz"]
⦁	
⦁	
⦁	6.Leetcode(String):ToCheckStringsEqual
⦁	import java.util.Scanner;
⦁	import java.util.Arrays;
⦁	public class A {
⦁	public boolean equal(String[] w1,String[] w2){
⦁	String s1 ="";
⦁	String s2 = "";
⦁	for(String w:w1){
⦁	s1+=w;
⦁	}
⦁	for(String w:w2){
⦁	s2+=w;
⦁	}
⦁	return s1.equals(s2);
⦁	}
⦁	public static void main(String args[]){
⦁	Scanner sc = new Scanner(System.in);

⦁	String[] w1 = sc.nextLine().split(" ");
⦁	
⦁	String[] w2 = sc.nextLine().split(" ");
⦁	A obj = new A();
⦁	boolean res = obj.equal(w1,w2);
⦁	System.out.print(res);
⦁	}
⦁	}
⦁	Output:
⦁	"ab" "c"
⦁	"abc"
⦁	true


7.LeetCode: Find the closest One
import java.util.Scanner;
class Solution {
    public static int firstCase(int x, int y, int z) {
        int d1 = Math.abs(x - z); // Distance for Person 1
        int d2 = Math.abs(y - z); // Distance for Person 2
        if (d1 < d2) {
            return 1;  // Person 1 arrives first
        } else if (d1 > d2) {
            return 2;  // Person 2 arrives first
        } else {
            return 0;  // Both arrive at same time
        }
    }
    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);

        System.out.print("Enter x (Person 1 position): ");
        int x = sc.nextInt();
        System.out.print("Enter y (Person 2 position): ");
        int y = sc.nextInt();
        System.out.print("Enter z (Person 3 position): ");
        int z = sc.nextInt();

        // Solution res = new Solution();
        int result = firstCase(x, y, z);
        System.out.println(result);

        sc.close(); // Close scanner
    }
}
Output:1 1 5
0
2 5 7
2
4 2 7
1


8.Leetcode(9):Checking the given number is palindrome or not.
class Solution {
    public boolean isPalindrome(int x) {
      int rev=0;
      int original =x;
       if(x<0){
        return false;
       }
      while(x>0){
        int digit = x%10;
        rev = rev*10+digit;
        x = x/10;
     }
     return rev==original;
    }
public static void main(String args[]){
Scanner sc = new Scanner(System.in);
int n = sc.nextInt();
solution s = new Solution();
System.out.print(s.isPalindrome(n));
}
}
Output:Example 1:
Input: x = 121
Output: true
Explanation: 121 reads as 121 from left to right and from right to left.
Example 2:
Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.
Example 3:
Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.


9.LeetCode:Add two numbers without using + operature.
import java.util.*;
class second{
  public int add(int a,int b){
    while(b!=0){
    int car = (a&b)<<1;
    a = a^b;
    b = car;
    }return a;
  }
  public static void main(String args[]){
    Scanner sc =  new Scanner(System.in);
    int a = sc.nextInt();
    int b = sc.nextInt();
    second s = new second();
    System.out.print(s.add(a,b));
  }
}
Output:
3(a)
5(b)
8

10.Leetcode:whether the number is power of two or not.
class Solution {
    public boolean isPowerOfTwo(int n) {
        
       if(n<=0){
        return false;
       }
       while(n%2==0){
        n/=2;
       }
       return n==1;
}
public static void main(String args[]){
Scanner sc = new Scanner(System.in);
int n = sc.nextInt();
Solution ans = new Solution();
System.out.print(ans.ispowerOfTwo(n));
}
}
Example 1:
Input: n = 1
Output: true
Explanation: 20 = 1
Example 2:
Input: n = 16
Output: true
Explanation: 24 = 16
Example 3:
Input: n = 3
Output: false


11.LeetCode(Array): Rotate array k times
import java.util.*;
class A{
    public  void right(int a[],int k){
        int n = a.length;
        k = k%n;
        reverse(a,0,n-1);
        reverse(a,0,k-1);
        reverse(a,k,n-1);

    }
    public  void reverse(int a[],int start,int end){
        while(start<end){
            int temp = a[start];
            a[start]= a[end];
            a[end]= temp;
            start++;
            end--;
        }
    }
    public static void main(String args[]){
        Scanner sc = new Scanner(System.in);
        int n  = sc.nextInt();
        int a[] = new int[n];
        for(int i =0;i<n;i++){
            a[i]=sc.nextInt();
        }
        int k = sc.nextInt();
        A ans = new A();
        ans.right(a,k);
        
        System.out.print(Arrays.toString(a));
        
    }
}
Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]
Example 2:
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]
